#!/bin/sh
#
# Magpie installer script

ROOT=$PWD

#===============================================================================
#                             Info
#===============================================================================

read -r DISTRO < /etc/os-release

echo "User Name?: "
read -r user_name
echo "User Password?: "
read -r user_password

#===============================================================================
#                             Users
#===============================================================================

useradd -m -s /bin/zsh -g wheel -G input,video,audio "$user_name"
echo "$user_name:$user_password" | chpasswd
unset "$user_password"
echo "$user_name ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
# echo "$user_name ALL=(ALL) ALL" >> /etc/sudoers

#===============================================================================
#                             Package Managers
#===============================================================================

#---------------------------------------
#              Paru
#---------------------------------------

if ! command -v paru; then
  cd /tmp || exit
  sudo -u "$user_name" git clone https://aur.archlinux.org/paru.git
  cd paru || exit
  sudo -u "$user_name" makepkg --noconfirm -si
fi

#===============================================================================
#                             Packages
#===============================================================================

pacman -Rnsdd libxft

cd $ROOT || exit 1
grep "^\^" .local/share/packages_essential \
  | sed "s/\^ //" \
  | pacman -S --needed --noconfirm -

grep "^@" .local/share/packages_essential \
  | sed "s/@ //" \
  | sudo -u "$user_name" paru -S --noconfirm --needed -

# printf "Repository Path? "
# read -r path_repo
# sudo -u "$user_name" mkdir -p "$path_repo"
# grep "^\\$" .local/share/packages_essential \
# | sed 's/$ //' \
# | while read -r repo; do
# cd "$path_repo" || exit 1
# # sudo -u "$user_name" git clone https://github.com/"$repo"
# sudo -u "$user_name" git clone git@github.com:"$repo".git
# cd "${repo##*/}" || exit 1
# sudo -u "$user_name" make && make install
# done

#===============================================================================
#                             Essential Mods
#===============================================================================

#---------------------------------------
#      Internal Storage Auto Mounting
#---------------------------------------

case "$DISTRO" in
  *Arch*) FSTAB_GEN_CMD=genfstab ;;
  *)
    pacman -S --noconfirm --needed artools-base
    FSTAB_GEN_CMD=fstabgen
    ;;
esac
$FSTAB_GEN_CMD -U / > /etc/fstab

#---------------------------------------
#              Trackpad
#---------------------------------------
mkdir -p /etc/X11/xorg.conf.d
cat << eof > /etc/X11/xorg.conf.d/30-touchpad.conf
Section "InputClass"
  Identifier      "touchpad"
  Driver          "libinput"
  MatchIsTouchpad "on"
  Option          "Tapping"          "on"
  Option          "ClickMethod"      "clickfinger"
  Option          "NaturalScrolling" "true"
EndSection
eof

# #---------------------------------------
# #              Audio
# #---------------------------------------
# cat << eof > /etc/modprobe.d/intel.conf
# options snd-hda-intel dmic_detect=0
# blacklist snd-intel8x0m
# eof

#---------------------------------------
#              Pacman
#---------------------------------------
sed -i "s/#Color/Color/" /etc/pacman.conf
sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf
# printf "%s\n%s" "[multilib]" "Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf

# Use all cores for compilation.
sed -i "s/-j2/-j$(nproc)/;s/^#MAKEFLAGS/MAKEFLAGS/" /etc/makepkg.conf

#---------------------------------------
#              Doas
#---------------------------------------
echo "permit nopass keepenv $user_name" > /etc/doas.conf

#---------------------------------------
#              Cronjob
#---------------------------------------

case "$DISTRO" in
  *Arch*) systemctl enable fcron ;;
  *)
    pacman -S --needed --noconfirm fcron-runit
    ln -s /etc/runit/sv/fcron /etc/runit/runsvdir/default 2> /dev/null
    ;;
esac

#---------------------------------------
#              Mail
#---------------------------------------
mkdir -p /home/"$user_name"/.local/share/mail

#---------------------------------------
#              Plug Notification
#---------------------------------------
cat << eof > /etc/udev/rules.d/battery.rules
SUBSYSTEM=="power_supply", ATTR{online}=="1", \
RUN+="/bin/su $user_name -c '/usr/local/bin/battery --plugged true'"
SUBSYSTEM=="power_supply", ATTR{online}=="0", \
RUN+="/bin/su $user_name -c '/usr/local/bin/battery --plugged false'"
eof

#---------------------------------------
#              Monitor Toggle
#---------------------------------------
cat << eof > /etc/udev/rules.d/monitor.rules
SUBSYSTEM=="drm", ACTION=="change", ENV{DISPLAY}=":0", \
    RUN+="/bin/su $user_name -c '/home/$user_name/.local/bin/set-display'"
eof

#---------------------------------------
#              Autologin
#---------------------------------------
case "$DISTRO" in
  *Arch*)
    mkdir /etc/systemd/system/getty@tty1.service.d
    cat << eof > /etc/systemd/system/getty@tty1.service.d/skip-prompt.conf
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --skip-login --nonewline --noissue --autologin $user_name --noclear %I $TERM
eof
    ;;
  *)
    sed -i "s/GETTY_ARGS=\"/GETTY_ARGS=\"--autologin $user_name /" \
      /etc/runit/sv/agetty-tty1/conf
    ;;
esac

#---------------------------------------
#              Wget
#---------------------------------------
mkdir -p /home/"$user_name"/.config/wget
: > /home/"$user_name"/.config/wget/wgetrc

#---------------------------------------
#               Remove extra ttys
#---------------------------------------
case "$DISTRO" in
  *Arch*) return ;;
  *) for i in 4 5 6; do rm /etc/runit/runsvdir/default/agetty-tty"$i"; done ;;
esac

# ---------------------------------------
# Dotfiles
# ---------------------------------------
cd "$ROOT" || exit 1
sudo -u "$user_name" cp -frs $(readlink -f .config .local .zprofile) /home/"$user_name"
# chown -R "$user_name":wheel $ROOT /home/"$user_name"
# sudo -u "$user_name" fcrontab /home/"$user_name"/.config/fcronrc

# ╔════════════════════════════════════════
# ║                    Qtile
# ╚════════════════════════════════════════
pip install qtile

# hibernation{{{
# ╔════════════════════════════════════════
# ║                    Hibernation
# ╚════════════════════════════════════════

swap_file_path=/mnt/internal/swapfile
sudo dd if=/dev/zero of=$swap_file_path bs=1G count=25 status=progress
sudo chmod 600 $swap_file_path
sudo mkswap $swap_file_path
sudo swapon $swap_file_path
echo "$swap_file_path none swap defaults 0 0" | sudo tee -a /etc/fstab

RESUME_PARAMS="resume=UUID=$(findmnt /mnt/internal -o UUID -n) resume_offset=$(sudo filefrag -v $swap_file_path | awk 'NR==4{gsub(/\./,"");print $4;}') "
sudo sed -i "s/GRUB_CMDLINE_LINUX=\"/GRUB_CMDLINE_LINUX=\"$RESUME_PARAMS/" /etc/default/grub
sudo grub-mkconfig -o /boot/grub/grub.cfg

sudo sed -i "s/^HOOKS=(/HOOKS=(resume /" /etc/mkinitcpio.conf
sudo mkinitcpio -P

#}}}
# exp{{{
#===============================================================================
#                             Exp
#===============================================================================

# #---------------------------------------
# #              Backlight
# #---------------------------------------
# cat << eof > /etc/X11/xorg.conf.d/20-intel_backlight.conf
# Section "Device"
#   Identifier  "Intel Graphics"
#   Driver      "intel"
#   Option      "Backlight"  "intel_backlight"
# EndSection
# eof

#---------------------------------------
#              Bash to Dash
#---------------------------------------
# pacman -S --noconfirm dash
# ln -sfT dash /usr/bin/sh
# cat << eof > /usr/share/libalpm/hooks/block_bash_overwrite.hook
# [Trigger]
# Type = Package
# Operation = Install
# Operation = Upgrade
# Target = bash
#
# [Action]
# Description = Re-pointing /bin/sh symlink to dash...
# When = PostTransaction
# Exec = /usr/bin/ln -sfT dash /usr/bin/sh
# Depends = dash
# eof

#---------------------------------------
#               Keys
#---------------------------------------
# curl -LO https://is.gd/sakeys
# gpg -o keys.tar -d sakeys
# tar xf keys.tar
# rm keys.tar


#---------------------------------------
#               Neovim
#---------------------------------------

#sudo -u "$user_name" pip3 install neovim
#sudo -u "$user_name" yarn global add neovim
#sudo -u "$user_name" gem install neovim
#sudo -u "$user_name" cpan Neovim::Ext

#---------------------------------------
#               Lua
#---------------------------------------

# git clone https://github.com/sumneko/lua-language-server
# cd lua-language-server || exit
# git submodule update --init --recursive

# cd 3rd/luamake || exit
# ninja -f ninja/linux.ninja
# cd ../..
# ./3rd/luamake/luamake rebuild

#---------------------------------------
#               phpactor
#---------------------------------------

# git clone git@github.com:phpactor/phpactor
# cd phpactor || exit
# composer install && sudo -u $USER ln -s $PWD/bin/phpactor ~/.local/bin

# cd 3rd/luamake || exit
# ninja -f ninja/linux.ninja
# cd ../..
# ./3rd/luamake/luamake rebuild

#---------------------------------------
#               Misc
#---------------------------------------

# Calcurse
# mkdir -p /home/"$user_name"/.local/share/calcurse/caldav

# Journal Limit
#mkdir /etc/systemd/journald.conf.d
#printf "%s\n%s" "[Journal]" "SystemMaxUse=50M" > /etc/systemd/journald.conf.d/00-journal-size.conf

# echo -e "%wheel ALL=(ALL) ALL #LARBS\n%wheel ALL=(ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/wifi-menu,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/packer -Syu,/usr/bin/packer -Syyu,/usr/bin/systemctl restart NetworkManager,/usr/bin/rc-service NetworkManager restart,/usr/bin/pacman -Syyu --noconfirm,/usr/bin/loadkeys,/usr/bin/yay,/usr/bin/pacman -Syyuw --noconfirm" >> /etc/sudoers
# grep "^%" packages.sh | sed "s/%//" | sudo -u "$user_name" npm install -g -
# echo -e "%wheel ALL=(ALL) NOPASSWD: ALL\nDefaults !tty_tickets" >> /etc/sudoers

# cat << eof > /etc/X11/xorg.conf.d/20-intel.conf
# Section "Device"
# Identifier  "Intel Graphics"
# Driver      "intel"
# Option      "TearFree"  "true"
# EndSection
# eof

# ╔════════════════════════════════════════
# ║                    Disable Swap
# ╚════════════════════════════════════════
# swapoff $swap_file_path
# rm -f $swap_file_path
#}}}
